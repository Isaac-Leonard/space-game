/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { AreAllOptional, InvalidateQueryFilters, MutationFiltersByMutationKey, MutationFiltersByParameters, MutationVariables, OperationInfiniteData, PartialParameters, QueryFiltersByParameters, QueryFiltersByQueryKey, QueryFnOptionsByParameters, QueryFnOptionsByQueryKey, RequestFnResponse, ServiceOperationEnsureInfiniteQueryDataOptions, ServiceOperationEnsureQueryDataOptions, ServiceOperationFetchInfiniteQueryOptions, ServiceOperationFetchQueryOptions, ServiceOperationInfiniteQueryKey, ServiceOperationMutationFnOptions, ServiceOperationMutationKey, ServiceOperationQueryKey, ServiceOperationUseMutationOptions, UseQueryOptionsForUseQueries, UseQueryOptionsForUseSuspenseQuery, WithOptional } from "@openapi-qraft/tanstack-query-react-types";
import type { CancelOptions, InfiniteQueryPageParamsOptions, InvalidateOptions, Mutation, MutationState, NoInfer, QueryState, RefetchOptions, ResetOptions, SetDataOptions, Updater } from "@tanstack/query-core";
import type { DefinedInitialDataInfiniteOptions, DefinedInitialDataOptions, DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UndefinedInitialDataInfiniteOptions, UndefinedInitialDataOptions, UseInfiniteQueryResult, UseMutationResult, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
export interface ApiService {
    getSystemsNearby: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetSystemsNearbyParameters | void): ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsNearby.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsNearbyData>(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options?: Omit<UndefinedInitialDataOptions<GetSystemsNearbyData, GetSystemsNearbyError, TData, ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>>, "queryKey">): UseQueryResult<TData, GetSystemsNearbyError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsNearby.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsNearbyData>(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options: Omit<DefinedInitialDataOptions<GetSystemsNearbyData, GetSystemsNearbyError, TData, ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSystemsNearbyError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetSystemsNearbyParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSystemsNearbySchema, GetSystemsNearbyData, GetSystemsNearbyParameters, TPageParam, GetSystemsNearbyError>): Promise<OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetSystemsNearbyParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSystemsNearbySchema, GetSystemsNearbyData, GetSystemsNearbyParameters, TPageParam, GetSystemsNearbyError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetSystemsNearbyParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetSystemsNearbySchema, GetSystemsNearbyData, GetSystemsNearbyParameters, TPageParam, GetSystemsNearbyError>): Promise<OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetSystemsNearbySchema, GetSystemsNearbyData, GetSystemsNearbyParameters, GetSystemsNearbyError> | void): Promise<GetSystemsNearbyData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetSystemsNearbySchema, GetSystemsNearbyData, GetSystemsNearbyParameters, GetSystemsNearbyError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetSystemsNearbySchema, GetSystemsNearbyData, GetSystemsNearbyParameters, GetSystemsNearbyError> | void): Promise<GetSystemsNearbyData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void)): OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>,
            data: NoInfer<OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>,
            data: GetSystemsNearbyData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void)): GetSystemsNearbyData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void)): QueryState<GetSystemsNearbyData, GetSystemsNearbyError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetSystemsNearbyParameters | ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | void): QueryState<OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters>, GetSystemsNearbyError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetSystemsNearbyParameters, TMeta, TSignal> | void), client?: (schema: GetSystemsNearbySchema, options: {
            parameters: GetSystemsNearbyParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetSystemsNearbyData, GetSystemsNearbyError>>): Promise<RequestFnResponse<GetSystemsNearbyData, GetSystemsNearbyError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetSystemsNearbyParameters | ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters>> | undefined, NoInfer<OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetSystemsNearbyData, GetSystemsNearbyParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>, updater: Updater<NoInfer<GetSystemsNearbyData> | undefined, NoInfer<GetSystemsNearbyData> | undefined>, options?: SetDataOptions): Array<GetSystemsNearbyData | undefined>;
        /**/
        setQueryData(parameters: (GetSystemsNearbyParameters | undefined) | ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>, updater: Updater<NoInfer<GetSystemsNearbyData> | undefined, NoInfer<GetSystemsNearbyData> | undefined>, options?: SetDataOptions): GetSystemsNearbyData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetSystemsNearbyParameters | void): ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSystemsNearby.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSystemsNearbyParameters, TData = GetSystemsNearbyData>(parameters: ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetSystemsNearbyData, GetSystemsNearbyError, OperationInfiniteData<TData, GetSystemsNearbyParameters>, ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSystemsNearbyData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetSystemsNearbyParameters>, GetSystemsNearbyError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSystemsNearby.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSystemsNearbyParameters, TData = GetSystemsNearbyData>(parameters: ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetSystemsNearbyData, GetSystemsNearbyError, OperationInfiniteData<TData, GetSystemsNearbyParameters>, ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSystemsNearbyData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetSystemsNearbyParameters>, GetSystemsNearbyError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getSystemsNearbyTotal = qraft.apiService.getSystemsNearby.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError> | QueryFiltersByQueryKey<GetSystemsNearbySchema, GetSystemsNearbyData, TInfinite, GetSystemsNearbyParameters, GetSystemsNearbyError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getSystemsNearbyResults = qraft.apiService.getSystemsNearby.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getSystemsNearbyResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getSystemsNearbyCombinedResults = qraft.apiService.getSystemsNearby.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getSystemsNearbyCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetSystemsNearbySchema, GetSystemsNearbyParameters, GetSystemsNearbyData, GetSystemsNearbyError>>, TCombinedResult = Array<UseQueryResult<GetSystemsNearbyData, GetSystemsNearbyError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetSystemsNearbyData, GetSystemsNearbyError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetSystemsNearbyParameters | void): ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsNearby.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsNearbyData>(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options?: Omit<UndefinedInitialDataOptions<GetSystemsNearbyData, GetSystemsNearbyError, TData, ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>>, "queryKey">): UseQueryResult<TData, GetSystemsNearbyError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsNearby.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsNearbyData>(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options: Omit<DefinedInitialDataOptions<GetSystemsNearbyData, GetSystemsNearbyError, TData, ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSystemsNearbyError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSystemsNearby.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetSystemsNearbyParameters, TData = GetSystemsNearbyData>(parameters: ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetSystemsNearbyData, GetSystemsNearbyError, OperationInfiniteData<TData, GetSystemsNearbyParameters>, GetSystemsNearbyData, ServiceOperationInfiniteQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSystemsNearbyData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetSystemsNearbyParameters>, GetSystemsNearbyError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetSystemsNearbySchema, GetSystemsNearbyParameters, GetSystemsNearbyData, GetSystemsNearbyError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetSystemsNearbyData, GetSystemsNearbyError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetSystemsNearbyData, GetSystemsNearbyError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetSystemsNearbyData>(parameters: ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters> | (GetSystemsNearbyParameters | void), options?: Omit<UseSuspenseQueryOptions<GetSystemsNearbyData, GetSystemsNearbyError, TData, ServiceOperationQueryKey<GetSystemsNearbySchema, GetSystemsNearbyParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetSystemsNearbyError | Error>;
        schema: GetSystemsNearbySchema;
        types: {
            parameters: GetSystemsNearbyParameters;
            data: GetSystemsNearbyData;
            error: GetSystemsNearbyError;
        };
    };
    getSystemsCurrentSystem: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetSystemsCurrentSystemParameters | void): ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsCurrentSystem.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options?: Omit<UndefinedInitialDataOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, TData, ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>>, "queryKey">): UseQueryResult<TData, GetSystemsCurrentSystemError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsCurrentSystem.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options: Omit<DefinedInitialDataOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, TData, ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSystemsCurrentSystemError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetSystemsCurrentSystemParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters, TPageParam, GetSystemsCurrentSystemError>): Promise<OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetSystemsCurrentSystemParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters, TPageParam, GetSystemsCurrentSystemError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetSystemsCurrentSystemParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters, TPageParam, GetSystemsCurrentSystemError>): Promise<OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | void): Promise<GetSystemsCurrentSystemData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | void): Promise<GetSystemsCurrentSystemData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void)): OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>,
            data: NoInfer<OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>,
            data: GetSystemsCurrentSystemData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void)): GetSystemsCurrentSystemData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void)): QueryState<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetSystemsCurrentSystemParameters | ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | void): QueryState<OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters>, GetSystemsCurrentSystemError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetSystemsCurrentSystemParameters, TMeta, TSignal> | void), client?: (schema: GetSystemsCurrentSystemSchema, options: {
            parameters: GetSystemsCurrentSystemParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>): Promise<RequestFnResponse<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetSystemsCurrentSystemParameters | ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters>> | undefined, NoInfer<OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetSystemsCurrentSystemData, GetSystemsCurrentSystemParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>, updater: Updater<NoInfer<GetSystemsCurrentSystemData> | undefined, NoInfer<GetSystemsCurrentSystemData> | undefined>, options?: SetDataOptions): Array<GetSystemsCurrentSystemData | undefined>;
        /**/
        setQueryData(parameters: (GetSystemsCurrentSystemParameters | undefined) | ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>, updater: Updater<NoInfer<GetSystemsCurrentSystemData> | undefined, NoInfer<GetSystemsCurrentSystemData> | undefined>, options?: SetDataOptions): GetSystemsCurrentSystemData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetSystemsCurrentSystemParameters | void): ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSystemsCurrentSystem.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSystemsCurrentSystemParameters, TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, OperationInfiniteData<TData, GetSystemsCurrentSystemParameters>, ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSystemsCurrentSystemData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetSystemsCurrentSystemParameters>, GetSystemsCurrentSystemError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSystemsCurrentSystem.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSystemsCurrentSystemParameters, TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, OperationInfiniteData<TData, GetSystemsCurrentSystemParameters>, ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSystemsCurrentSystemData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetSystemsCurrentSystemParameters>, GetSystemsCurrentSystemError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getSystemsCurrentSystemTotal = qraft.apiService.getSystemsCurrentSystem.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError> | QueryFiltersByQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemData, TInfinite, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getSystemsCurrentSystemResults = qraft.apiService.getSystemsCurrentSystem.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getSystemsCurrentSystemResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getSystemsCurrentSystemCombinedResults = qraft.apiService.getSystemsCurrentSystem.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getSystemsCurrentSystemCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>, TCombinedResult = Array<UseQueryResult<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetSystemsCurrentSystemParameters | void): ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsCurrentSystem.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options?: Omit<UndefinedInitialDataOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, TData, ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>>, "queryKey">): UseQueryResult<TData, GetSystemsCurrentSystemError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSystemsCurrentSystem.useQuery()
         * ```
         */
        useQuery<TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options: Omit<DefinedInitialDataOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, TData, ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSystemsCurrentSystemError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSystemsCurrentSystem.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetSystemsCurrentSystemParameters, TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, OperationInfiniteData<TData, GetSystemsCurrentSystemParameters>, GetSystemsCurrentSystemData, ServiceOperationInfiniteQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSystemsCurrentSystemData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetSystemsCurrentSystemParameters>, GetSystemsCurrentSystemError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters, GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetSystemsCurrentSystemData>(parameters: ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters> | (GetSystemsCurrentSystemParameters | void), options?: Omit<UseSuspenseQueryOptions<GetSystemsCurrentSystemData, GetSystemsCurrentSystemError, TData, ServiceOperationQueryKey<GetSystemsCurrentSystemSchema, GetSystemsCurrentSystemParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetSystemsCurrentSystemError | Error>;
        schema: GetSystemsCurrentSystemSchema;
        types: {
            parameters: GetSystemsCurrentSystemParameters;
            data: GetSystemsCurrentSystemData;
            error: GetSystemsCurrentSystemError;
        };
    };
    getSpacecrafts: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetSpacecraftsParameters | void): ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetSpacecraftsData>(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options?: Omit<UndefinedInitialDataOptions<GetSpacecraftsData, GetSpacecraftsError, TData, ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>>, "queryKey">): UseQueryResult<TData, GetSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetSpacecraftsData>(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options: Omit<DefinedInitialDataOptions<GetSpacecraftsData, GetSpacecraftsError, TData, ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSpacecraftsError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetSpacecraftsParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSpacecraftsSchema, GetSpacecraftsData, GetSpacecraftsParameters, TPageParam, GetSpacecraftsError>): Promise<OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetSpacecraftsParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSpacecraftsSchema, GetSpacecraftsData, GetSpacecraftsParameters, TPageParam, GetSpacecraftsError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetSpacecraftsParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetSpacecraftsSchema, GetSpacecraftsData, GetSpacecraftsParameters, TPageParam, GetSpacecraftsError>): Promise<OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetSpacecraftsSchema, GetSpacecraftsData, GetSpacecraftsParameters, GetSpacecraftsError> | void): Promise<GetSpacecraftsData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetSpacecraftsSchema, GetSpacecraftsData, GetSpacecraftsParameters, GetSpacecraftsError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetSpacecraftsSchema, GetSpacecraftsData, GetSpacecraftsParameters, GetSpacecraftsError> | void): Promise<GetSpacecraftsData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void)): OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>,
            data: NoInfer<OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>,
            data: GetSpacecraftsData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void)): GetSpacecraftsData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void)): QueryState<GetSpacecraftsData, GetSpacecraftsError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetSpacecraftsParameters | ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | void): QueryState<OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters>, GetSpacecraftsError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetSpacecraftsParameters, TMeta, TSignal> | void), client?: (schema: GetSpacecraftsSchema, options: {
            parameters: GetSpacecraftsParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetSpacecraftsData, GetSpacecraftsError>>): Promise<RequestFnResponse<GetSpacecraftsData, GetSpacecraftsError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetSpacecraftsParameters | ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters>> | undefined, NoInfer<OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetSpacecraftsData, GetSpacecraftsParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>, updater: Updater<NoInfer<GetSpacecraftsData> | undefined, NoInfer<GetSpacecraftsData> | undefined>, options?: SetDataOptions): Array<GetSpacecraftsData | undefined>;
        /**/
        setQueryData(parameters: (GetSpacecraftsParameters | undefined) | ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>, updater: Updater<NoInfer<GetSpacecraftsData> | undefined, NoInfer<GetSpacecraftsData> | undefined>, options?: SetDataOptions): GetSpacecraftsData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetSpacecraftsParameters | void): ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSpacecrafts.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSpacecraftsParameters, TData = GetSpacecraftsData>(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetSpacecraftsData, GetSpacecraftsError, OperationInfiniteData<TData, GetSpacecraftsParameters>, ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSpacecraftsData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetSpacecraftsParameters>, GetSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSpacecrafts.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSpacecraftsParameters, TData = GetSpacecraftsData>(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetSpacecraftsData, GetSpacecraftsError, OperationInfiniteData<TData, GetSpacecraftsParameters>, ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSpacecraftsData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetSpacecraftsParameters>, GetSpacecraftsError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getSpacecraftsTotal = qraft.apiService.getSpacecrafts.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError> | QueryFiltersByQueryKey<GetSpacecraftsSchema, GetSpacecraftsData, TInfinite, GetSpacecraftsParameters, GetSpacecraftsError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getSpacecraftsResults = qraft.apiService.getSpacecrafts.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getSpacecraftsResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getSpacecraftsCombinedResults = qraft.apiService.getSpacecrafts.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getSpacecraftsCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetSpacecraftsSchema, GetSpacecraftsParameters, GetSpacecraftsData, GetSpacecraftsError>>, TCombinedResult = Array<UseQueryResult<GetSpacecraftsData, GetSpacecraftsError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetSpacecraftsData, GetSpacecraftsError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetSpacecraftsParameters | void): ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetSpacecraftsData>(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options?: Omit<UndefinedInitialDataOptions<GetSpacecraftsData, GetSpacecraftsError, TData, ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>>, "queryKey">): UseQueryResult<TData, GetSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetSpacecraftsData>(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options: Omit<DefinedInitialDataOptions<GetSpacecraftsData, GetSpacecraftsError, TData, ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSpacecrafts.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetSpacecraftsParameters, TData = GetSpacecraftsData>(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetSpacecraftsData, GetSpacecraftsError, OperationInfiniteData<TData, GetSpacecraftsParameters>, GetSpacecraftsData, ServiceOperationInfiniteQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSpacecraftsData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetSpacecraftsParameters>, GetSpacecraftsError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetSpacecraftsSchema, GetSpacecraftsParameters, GetSpacecraftsData, GetSpacecraftsError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetSpacecraftsData, GetSpacecraftsError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetSpacecraftsData, GetSpacecraftsError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetSpacecraftsData>(parameters: ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters> | (GetSpacecraftsParameters | void), options?: Omit<UseSuspenseQueryOptions<GetSpacecraftsData, GetSpacecraftsError, TData, ServiceOperationQueryKey<GetSpacecraftsSchema, GetSpacecraftsParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetSpacecraftsError | Error>;
        schema: GetSpacecraftsSchema;
        types: {
            parameters: GetSpacecraftsParameters;
            data: GetSpacecraftsData;
            error: GetSpacecraftsError;
        };
    };
    getSpacecraftsId: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetSpacecraftsIdParameters): ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecraftsId.useQuery({
         *     path: {
         *         id: id
         *     }
         * })
         * ```
         */
        useQuery<TData = GetSpacecraftsIdData>(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options?: Omit<UndefinedInitialDataOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, TData, ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>>, "queryKey">): UseQueryResult<TData, GetSpacecraftsIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecraftsId.useQuery({
         *     path: {
         *         id: id
         *     }
         * })
         * ```
         */
        useQuery<TData = GetSpacecraftsIdData>(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options: Omit<DefinedInitialDataOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, TData, ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSpacecraftsIdError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetSpacecraftsIdParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSpacecraftsIdSchema, GetSpacecraftsIdData, GetSpacecraftsIdParameters, TPageParam, GetSpacecraftsIdError>): Promise<OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetSpacecraftsIdParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSpacecraftsIdSchema, GetSpacecraftsIdData, GetSpacecraftsIdParameters, TPageParam, GetSpacecraftsIdError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetSpacecraftsIdParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetSpacecraftsIdSchema, GetSpacecraftsIdData, GetSpacecraftsIdParameters, TPageParam, GetSpacecraftsIdError>): Promise<OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetSpacecraftsIdSchema, GetSpacecraftsIdData, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): Promise<GetSpacecraftsIdData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetSpacecraftsIdSchema, GetSpacecraftsIdData, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetSpacecraftsIdSchema, GetSpacecraftsIdData, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): Promise<GetSpacecraftsIdData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters)): OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>,
            data: NoInfer<OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>,
            data: GetSpacecraftsIdData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters)): GetSpacecraftsIdData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters)): QueryState<GetSpacecraftsIdData, GetSpacecraftsIdError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetSpacecraftsIdParameters | ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>): QueryState<OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters>, GetSpacecraftsIdError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetSpacecraftsIdParameters, TMeta, TSignal>), client?: (schema: GetSpacecraftsIdSchema, options: {
            parameters: GetSpacecraftsIdParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetSpacecraftsIdData, GetSpacecraftsIdError>>): Promise<RequestFnResponse<GetSpacecraftsIdData, GetSpacecraftsIdError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetSpacecraftsIdParameters | ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters>> | undefined, NoInfer<OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetSpacecraftsIdData, GetSpacecraftsIdParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>, updater: Updater<NoInfer<GetSpacecraftsIdData> | undefined, NoInfer<GetSpacecraftsIdData> | undefined>, options?: SetDataOptions): Array<GetSpacecraftsIdData | undefined>;
        /**/
        setQueryData(parameters: (GetSpacecraftsIdParameters) | ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>, updater: Updater<NoInfer<GetSpacecraftsIdData> | undefined, NoInfer<GetSpacecraftsIdData> | undefined>, options?: SetDataOptions): GetSpacecraftsIdData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetSpacecraftsIdParameters): ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSpacecraftsId.useInfiniteQuery({
         *     path: {
         *         id: id
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSpacecraftsIdParameters, TData = GetSpacecraftsIdData>(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options: Omit<UndefinedInitialDataInfiniteOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, OperationInfiniteData<TData, GetSpacecraftsIdParameters>, ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSpacecraftsIdData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetSpacecraftsIdParameters>, GetSpacecraftsIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSpacecraftsId.useInfiniteQuery({
         *     path: {
         *         id: id
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetSpacecraftsIdParameters, TData = GetSpacecraftsIdData>(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options: Omit<DefinedInitialDataInfiniteOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, OperationInfiniteData<TData, GetSpacecraftsIdParameters>, ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSpacecraftsIdData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetSpacecraftsIdParameters>, GetSpacecraftsIdError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getSpacecraftsIdTotal = qraft.apiService.getSpacecraftsId.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const getSpacecraftsIdByParametersTotal = qraft.apiService.getSpacecraftsId.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         path: {
         *             id: id
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError> | QueryFiltersByQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdData, TInfinite, GetSpacecraftsIdParameters, GetSpacecraftsIdError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getSpacecraftsIdResults = qraft.apiService.getSpacecraftsId.useQueries({
         *     queries: [
         *         {
         *             path: {
         *                 id: id1
         *             }
         *         },
         *         {
         *             path: {
         *                 id: id2
         *             }
         *         }
         *     ]
         * });
         * getSpacecraftsIdResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getSpacecraftsIdCombinedResults = qraft.apiService.getSpacecraftsId.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             path: {
         *                 id: id1
         *             }
         *         },
         *         {
         *             path: {
         *                 id: id2
         *             }
         *         }
         *     ]
         * });
         * getSpacecraftsIdCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters, GetSpacecraftsIdData, GetSpacecraftsIdError>>, TCombinedResult = Array<UseQueryResult<GetSpacecraftsIdData, GetSpacecraftsIdError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetSpacecraftsIdData, GetSpacecraftsIdError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetSpacecraftsIdParameters): ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecraftsId.useQuery({
         *     path: {
         *         id: id
         *     }
         * })
         * ```
         */
        useQuery<TData = GetSpacecraftsIdData>(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options?: Omit<UndefinedInitialDataOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, TData, ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>>, "queryKey">): UseQueryResult<TData, GetSpacecraftsIdError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getSpacecraftsId.useQuery({
         *     path: {
         *         id: id
         *     }
         * })
         * ```
         */
        useQuery<TData = GetSpacecraftsIdData>(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options: Omit<DefinedInitialDataOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, TData, ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetSpacecraftsIdError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getSpacecraftsId.useSuspenseInfiniteQuery({
         *     path: {
         *         id: id
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetSpacecraftsIdParameters, TData = GetSpacecraftsIdData>(parameters: ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options: Omit<UseSuspenseInfiniteQueryOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, OperationInfiniteData<TData, GetSpacecraftsIdParameters>, GetSpacecraftsIdData, ServiceOperationInfiniteQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetSpacecraftsIdData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetSpacecraftsIdParameters>, GetSpacecraftsIdError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters, GetSpacecraftsIdData, GetSpacecraftsIdError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetSpacecraftsIdData, GetSpacecraftsIdError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetSpacecraftsIdData, GetSpacecraftsIdError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetSpacecraftsIdData>(parameters: ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters> | (GetSpacecraftsIdParameters), options?: Omit<UseSuspenseQueryOptions<GetSpacecraftsIdData, GetSpacecraftsIdError, TData, ServiceOperationQueryKey<GetSpacecraftsIdSchema, GetSpacecraftsIdParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetSpacecraftsIdError | Error>;
        schema: GetSpacecraftsIdSchema;
        types: {
            parameters: GetSpacecraftsIdParameters;
            data: GetSpacecraftsIdData;
            error: GetSpacecraftsIdError;
        };
    };
    postAuthRegister: {
        /**/
        getMutationKey(parameters: PostAuthRegisterParameters | void): ServiceOperationMutationKey<PostAuthRegisterSchema, PostAuthRegisterParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthRegister.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthRegister.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends PostAuthRegisterBody, TContext = unknown>(parameters: PostAuthRegisterParameters, options?: ServiceOperationUseMutationOptions<PostAuthRegisterSchema, PostAuthRegisterData, PostAuthRegisterParameters, TVariables, PostAuthRegisterError, TContext>): UseMutationResult<PostAuthRegisterData, PostAuthRegisterError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthRegister.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthRegister.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<PostAuthRegisterBody, PostAuthRegisterParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<PostAuthRegisterSchema, PostAuthRegisterData, PostAuthRegisterParameters, TVariables, PostAuthRegisterError, TContext>): UseMutationResult<PostAuthRegisterData, PostAuthRegisterError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const postAuthRegisterTotal = qraft.apiService.postAuthRegister.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const postAuthRegisterTotal = qraft.apiService.postAuthRegister.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<PostAuthRegisterBody, PostAuthRegisterData, PostAuthRegisterParameters, PostAuthRegisterError, TContext> | MutationFiltersByMutationKey<PostAuthRegisterSchema, PostAuthRegisterBody, PostAuthRegisterData, PostAuthRegisterParameters, PostAuthRegisterError, TContext>): number;
        /**/
        isMutating<TContext>(filters?: MutationFiltersByParameters<PostAuthRegisterBody, PostAuthRegisterData, PostAuthRegisterParameters, PostAuthRegisterError, TContext> | MutationFiltersByMutationKey<PostAuthRegisterSchema, PostAuthRegisterBody, PostAuthRegisterData, PostAuthRegisterParameters, PostAuthRegisterError, TContext>): number;
        /**/
        (options: ServiceOperationMutationFnOptions<PostAuthRegisterBody, PostAuthRegisterParameters>, client?: (schema: PostAuthRegisterSchema, options: ServiceOperationMutationFnOptions<PostAuthRegisterBody, PostAuthRegisterParameters>) => Promise<RequestFnResponse<PostAuthRegisterData, PostAuthRegisterError>>): Promise<RequestFnResponse<PostAuthRegisterData, PostAuthRegisterError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const postAuthRegisterPendingMutationVariables = qraft.apiService.postAuthRegister.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const postAuthRegisterMutationData = qraft.apiService.postAuthRegister.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<PostAuthRegisterData, PostAuthRegisterError, MutationVariables<PostAuthRegisterBody, PostAuthRegisterParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<PostAuthRegisterBody, PostAuthRegisterData, PostAuthRegisterParameters, PostAuthRegisterError, TContext> | MutationFiltersByMutationKey<PostAuthRegisterSchema, PostAuthRegisterBody, PostAuthRegisterData, PostAuthRegisterParameters, PostAuthRegisterError, TContext>;
            select?: (mutation: Mutation<PostAuthRegisterData, PostAuthRegisterError, MutationVariables<PostAuthRegisterBody, PostAuthRegisterParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: PostAuthRegisterSchema;
        types: {
            parameters: PostAuthRegisterParameters;
            data: PostAuthRegisterData;
            error: PostAuthRegisterError;
            body: PostAuthRegisterBody;
        };
    };
    getAuthVerifyToken: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetAuthVerifyTokenParameters): ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthVerifyToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthVerifyTokenData>(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options?: Omit<UndefinedInitialDataOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, TData, ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>>, "queryKey">): UseQueryResult<TData, GetAuthVerifyTokenError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthVerifyToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthVerifyTokenData>(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options: Omit<DefinedInitialDataOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, TData, ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAuthVerifyTokenError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetAuthVerifyTokenParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, GetAuthVerifyTokenParameters, TPageParam, GetAuthVerifyTokenError>): Promise<OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetAuthVerifyTokenParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, GetAuthVerifyTokenParameters, TPageParam, GetAuthVerifyTokenError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetAuthVerifyTokenParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, GetAuthVerifyTokenParameters, TPageParam, GetAuthVerifyTokenError>): Promise<OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): Promise<GetAuthVerifyTokenData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): Promise<GetAuthVerifyTokenData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters)): OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>,
            data: NoInfer<OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>,
            data: GetAuthVerifyTokenData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters)): GetAuthVerifyTokenData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters)): QueryState<GetAuthVerifyTokenData, GetAuthVerifyTokenError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetAuthVerifyTokenParameters | ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>): QueryState<OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters>, GetAuthVerifyTokenError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetAuthVerifyTokenParameters, TMeta, TSignal>), client?: (schema: GetAuthVerifyTokenSchema, options: {
            parameters: GetAuthVerifyTokenParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetAuthVerifyTokenData, GetAuthVerifyTokenError>>): Promise<RequestFnResponse<GetAuthVerifyTokenData, GetAuthVerifyTokenError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetAuthVerifyTokenParameters | ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters>> | undefined, NoInfer<OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetAuthVerifyTokenData, GetAuthVerifyTokenParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>, updater: Updater<NoInfer<GetAuthVerifyTokenData> | undefined, NoInfer<GetAuthVerifyTokenData> | undefined>, options?: SetDataOptions): Array<GetAuthVerifyTokenData | undefined>;
        /**/
        setQueryData(parameters: (GetAuthVerifyTokenParameters) | ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>, updater: Updater<NoInfer<GetAuthVerifyTokenData> | undefined, NoInfer<GetAuthVerifyTokenData> | undefined>, options?: SetDataOptions): GetAuthVerifyTokenData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetAuthVerifyTokenParameters): ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthVerifyToken.useInfiniteQuery({
         *     path: {
         *         token: token
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAuthVerifyTokenParameters, TData = GetAuthVerifyTokenData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options: Omit<UndefinedInitialDataInfiniteOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, OperationInfiniteData<TData, GetAuthVerifyTokenParameters>, ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthVerifyTokenData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthVerifyTokenParameters>, GetAuthVerifyTokenError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthVerifyToken.useInfiniteQuery({
         *     path: {
         *         token: token
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAuthVerifyTokenParameters, TData = GetAuthVerifyTokenData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options: Omit<DefinedInitialDataInfiniteOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, OperationInfiniteData<TData, GetAuthVerifyTokenParameters>, ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthVerifyTokenData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthVerifyTokenParameters>, GetAuthVerifyTokenError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getAuthVerifyTokenTotal = qraft.apiService.getAuthVerifyToken.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const getAuthVerifyTokenByParametersTotal = qraft.apiService.getAuthVerifyToken.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         path: {
         *             token: token
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError> | QueryFiltersByQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenData, TInfinite, GetAuthVerifyTokenParameters, GetAuthVerifyTokenError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getAuthVerifyTokenResults = qraft.apiService.getAuthVerifyToken.useQueries({
         *     queries: [
         *         {
         *             path: {
         *                 token: token1
         *             }
         *         },
         *         {
         *             path: {
         *                 token: token2
         *             }
         *         }
         *     ]
         * });
         * getAuthVerifyTokenResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getAuthVerifyTokenCombinedResults = qraft.apiService.getAuthVerifyToken.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             path: {
         *                 token: token1
         *             }
         *         },
         *         {
         *             path: {
         *                 token: token2
         *             }
         *         }
         *     ]
         * });
         * getAuthVerifyTokenCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters, GetAuthVerifyTokenData, GetAuthVerifyTokenError>>, TCombinedResult = Array<UseQueryResult<GetAuthVerifyTokenData, GetAuthVerifyTokenError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetAuthVerifyTokenData, GetAuthVerifyTokenError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetAuthVerifyTokenParameters): ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthVerifyToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthVerifyTokenData>(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options?: Omit<UndefinedInitialDataOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, TData, ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>>, "queryKey">): UseQueryResult<TData, GetAuthVerifyTokenError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthVerifyToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthVerifyTokenData>(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options: Omit<DefinedInitialDataOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, TData, ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAuthVerifyTokenError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthVerifyToken.useSuspenseInfiniteQuery({
         *     path: {
         *         token: token
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetAuthVerifyTokenParameters, TData = GetAuthVerifyTokenData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options: Omit<UseSuspenseInfiniteQueryOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, OperationInfiniteData<TData, GetAuthVerifyTokenParameters>, GetAuthVerifyTokenData, ServiceOperationInfiniteQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthVerifyTokenData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthVerifyTokenParameters>, GetAuthVerifyTokenError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters, GetAuthVerifyTokenData, GetAuthVerifyTokenError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetAuthVerifyTokenData, GetAuthVerifyTokenError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetAuthVerifyTokenData, GetAuthVerifyTokenError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetAuthVerifyTokenData>(parameters: ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters> | (GetAuthVerifyTokenParameters), options?: Omit<UseSuspenseQueryOptions<GetAuthVerifyTokenData, GetAuthVerifyTokenError, TData, ServiceOperationQueryKey<GetAuthVerifyTokenSchema, GetAuthVerifyTokenParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetAuthVerifyTokenError | Error>;
        schema: GetAuthVerifyTokenSchema;
        types: {
            parameters: GetAuthVerifyTokenParameters;
            data: GetAuthVerifyTokenData;
            error: GetAuthVerifyTokenError;
        };
    };
    postAuthLogin: {
        /**/
        getMutationKey(parameters: PostAuthLoginParameters | void): ServiceOperationMutationKey<PostAuthLoginSchema, PostAuthLoginParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthLogin.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthLogin.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends PostAuthLoginBody, TContext = unknown>(parameters: PostAuthLoginParameters, options?: ServiceOperationUseMutationOptions<PostAuthLoginSchema, PostAuthLoginData, PostAuthLoginParameters, TVariables, PostAuthLoginError, TContext>): UseMutationResult<PostAuthLoginData, PostAuthLoginError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthLogin.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthLogin.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<PostAuthLoginBody, PostAuthLoginParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<PostAuthLoginSchema, PostAuthLoginData, PostAuthLoginParameters, TVariables, PostAuthLoginError, TContext>): UseMutationResult<PostAuthLoginData, PostAuthLoginError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const postAuthLoginTotal = qraft.apiService.postAuthLogin.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const postAuthLoginTotal = qraft.apiService.postAuthLogin.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<PostAuthLoginBody, PostAuthLoginData, PostAuthLoginParameters, PostAuthLoginError, TContext> | MutationFiltersByMutationKey<PostAuthLoginSchema, PostAuthLoginBody, PostAuthLoginData, PostAuthLoginParameters, PostAuthLoginError, TContext>): number;
        /**/
        isMutating<TContext>(filters?: MutationFiltersByParameters<PostAuthLoginBody, PostAuthLoginData, PostAuthLoginParameters, PostAuthLoginError, TContext> | MutationFiltersByMutationKey<PostAuthLoginSchema, PostAuthLoginBody, PostAuthLoginData, PostAuthLoginParameters, PostAuthLoginError, TContext>): number;
        /**/
        (options: ServiceOperationMutationFnOptions<PostAuthLoginBody, PostAuthLoginParameters>, client?: (schema: PostAuthLoginSchema, options: ServiceOperationMutationFnOptions<PostAuthLoginBody, PostAuthLoginParameters>) => Promise<RequestFnResponse<PostAuthLoginData, PostAuthLoginError>>): Promise<RequestFnResponse<PostAuthLoginData, PostAuthLoginError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const postAuthLoginPendingMutationVariables = qraft.apiService.postAuthLogin.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const postAuthLoginMutationData = qraft.apiService.postAuthLogin.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<PostAuthLoginData, PostAuthLoginError, MutationVariables<PostAuthLoginBody, PostAuthLoginParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<PostAuthLoginBody, PostAuthLoginData, PostAuthLoginParameters, PostAuthLoginError, TContext> | MutationFiltersByMutationKey<PostAuthLoginSchema, PostAuthLoginBody, PostAuthLoginData, PostAuthLoginParameters, PostAuthLoginError, TContext>;
            select?: (mutation: Mutation<PostAuthLoginData, PostAuthLoginError, MutationVariables<PostAuthLoginBody, PostAuthLoginParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: PostAuthLoginSchema;
        types: {
            parameters: PostAuthLoginParameters;
            data: PostAuthLoginData;
            error: PostAuthLoginError;
            body: PostAuthLoginBody;
        };
    };
    postAuthForgot: {
        /**/
        getMutationKey(parameters: PostAuthForgotParameters | void): ServiceOperationMutationKey<PostAuthForgotSchema, PostAuthForgotParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthForgot.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthForgot.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends PostAuthForgotBody, TContext = unknown>(parameters: PostAuthForgotParameters, options?: ServiceOperationUseMutationOptions<PostAuthForgotSchema, PostAuthForgotData, PostAuthForgotParameters, TVariables, PostAuthForgotError, TContext>): UseMutationResult<PostAuthForgotData, PostAuthForgotError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthForgot.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthForgot.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<PostAuthForgotBody, PostAuthForgotParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<PostAuthForgotSchema, PostAuthForgotData, PostAuthForgotParameters, TVariables, PostAuthForgotError, TContext>): UseMutationResult<PostAuthForgotData, PostAuthForgotError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const postAuthForgotTotal = qraft.apiService.postAuthForgot.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const postAuthForgotTotal = qraft.apiService.postAuthForgot.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<PostAuthForgotBody, PostAuthForgotData, PostAuthForgotParameters, PostAuthForgotError, TContext> | MutationFiltersByMutationKey<PostAuthForgotSchema, PostAuthForgotBody, PostAuthForgotData, PostAuthForgotParameters, PostAuthForgotError, TContext>): number;
        /**/
        isMutating<TContext>(filters?: MutationFiltersByParameters<PostAuthForgotBody, PostAuthForgotData, PostAuthForgotParameters, PostAuthForgotError, TContext> | MutationFiltersByMutationKey<PostAuthForgotSchema, PostAuthForgotBody, PostAuthForgotData, PostAuthForgotParameters, PostAuthForgotError, TContext>): number;
        /**/
        (options: ServiceOperationMutationFnOptions<PostAuthForgotBody, PostAuthForgotParameters>, client?: (schema: PostAuthForgotSchema, options: ServiceOperationMutationFnOptions<PostAuthForgotBody, PostAuthForgotParameters>) => Promise<RequestFnResponse<PostAuthForgotData, PostAuthForgotError>>): Promise<RequestFnResponse<PostAuthForgotData, PostAuthForgotError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const postAuthForgotPendingMutationVariables = qraft.apiService.postAuthForgot.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const postAuthForgotMutationData = qraft.apiService.postAuthForgot.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<PostAuthForgotData, PostAuthForgotError, MutationVariables<PostAuthForgotBody, PostAuthForgotParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<PostAuthForgotBody, PostAuthForgotData, PostAuthForgotParameters, PostAuthForgotError, TContext> | MutationFiltersByMutationKey<PostAuthForgotSchema, PostAuthForgotBody, PostAuthForgotData, PostAuthForgotParameters, PostAuthForgotError, TContext>;
            select?: (mutation: Mutation<PostAuthForgotData, PostAuthForgotError, MutationVariables<PostAuthForgotBody, PostAuthForgotParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: PostAuthForgotSchema;
        types: {
            parameters: PostAuthForgotParameters;
            data: PostAuthForgotData;
            error: PostAuthForgotError;
            body: PostAuthForgotBody;
        };
    };
    postAuthReset: {
        /**/
        getMutationKey(parameters: PostAuthResetParameters | void): ServiceOperationMutationKey<PostAuthResetSchema, PostAuthResetParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthReset.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthReset.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends PostAuthResetBody, TContext = unknown>(parameters: PostAuthResetParameters, options?: ServiceOperationUseMutationOptions<PostAuthResetSchema, PostAuthResetData, PostAuthResetParameters, TVariables, PostAuthResetError, TContext>): UseMutationResult<PostAuthResetData, PostAuthResetError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthReset.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthReset.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<PostAuthResetBody, PostAuthResetParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<PostAuthResetSchema, PostAuthResetData, PostAuthResetParameters, TVariables, PostAuthResetError, TContext>): UseMutationResult<PostAuthResetData, PostAuthResetError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const postAuthResetTotal = qraft.apiService.postAuthReset.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const postAuthResetTotal = qraft.apiService.postAuthReset.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<PostAuthResetBody, PostAuthResetData, PostAuthResetParameters, PostAuthResetError, TContext> | MutationFiltersByMutationKey<PostAuthResetSchema, PostAuthResetBody, PostAuthResetData, PostAuthResetParameters, PostAuthResetError, TContext>): number;
        /**/
        isMutating<TContext>(filters?: MutationFiltersByParameters<PostAuthResetBody, PostAuthResetData, PostAuthResetParameters, PostAuthResetError, TContext> | MutationFiltersByMutationKey<PostAuthResetSchema, PostAuthResetBody, PostAuthResetData, PostAuthResetParameters, PostAuthResetError, TContext>): number;
        /**/
        (options: ServiceOperationMutationFnOptions<PostAuthResetBody, PostAuthResetParameters>, client?: (schema: PostAuthResetSchema, options: ServiceOperationMutationFnOptions<PostAuthResetBody, PostAuthResetParameters>) => Promise<RequestFnResponse<PostAuthResetData, PostAuthResetError>>): Promise<RequestFnResponse<PostAuthResetData, PostAuthResetError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const postAuthResetPendingMutationVariables = qraft.apiService.postAuthReset.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const postAuthResetMutationData = qraft.apiService.postAuthReset.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<PostAuthResetData, PostAuthResetError, MutationVariables<PostAuthResetBody, PostAuthResetParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<PostAuthResetBody, PostAuthResetData, PostAuthResetParameters, PostAuthResetError, TContext> | MutationFiltersByMutationKey<PostAuthResetSchema, PostAuthResetBody, PostAuthResetData, PostAuthResetParameters, PostAuthResetError, TContext>;
            select?: (mutation: Mutation<PostAuthResetData, PostAuthResetError, MutationVariables<PostAuthResetBody, PostAuthResetParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: PostAuthResetSchema;
        types: {
            parameters: PostAuthResetParameters;
            data: PostAuthResetData;
            error: PostAuthResetError;
            body: PostAuthResetBody;
        };
    };
    getAuthCurrent: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetAuthCurrentParameters | void): ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthCurrent.useQuery()
         * ```
         */
        useQuery<TData = GetAuthCurrentData>(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options?: Omit<UndefinedInitialDataOptions<GetAuthCurrentData, GetAuthCurrentError, TData, ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>>, "queryKey">): UseQueryResult<TData, GetAuthCurrentError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthCurrent.useQuery()
         * ```
         */
        useQuery<TData = GetAuthCurrentData>(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options: Omit<DefinedInitialDataOptions<GetAuthCurrentData, GetAuthCurrentError, TData, ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAuthCurrentError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetAuthCurrentParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAuthCurrentSchema, GetAuthCurrentData, GetAuthCurrentParameters, TPageParam, GetAuthCurrentError>): Promise<OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetAuthCurrentParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAuthCurrentSchema, GetAuthCurrentData, GetAuthCurrentParameters, TPageParam, GetAuthCurrentError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetAuthCurrentParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetAuthCurrentSchema, GetAuthCurrentData, GetAuthCurrentParameters, TPageParam, GetAuthCurrentError>): Promise<OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetAuthCurrentSchema, GetAuthCurrentData, GetAuthCurrentParameters, GetAuthCurrentError> | void): Promise<GetAuthCurrentData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetAuthCurrentSchema, GetAuthCurrentData, GetAuthCurrentParameters, GetAuthCurrentError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetAuthCurrentSchema, GetAuthCurrentData, GetAuthCurrentParameters, GetAuthCurrentError> | void): Promise<GetAuthCurrentData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void)): OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>,
            data: NoInfer<OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>,
            data: GetAuthCurrentData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void)): GetAuthCurrentData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void)): QueryState<GetAuthCurrentData, GetAuthCurrentError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetAuthCurrentParameters | ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | void): QueryState<OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters>, GetAuthCurrentError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetAuthCurrentParameters, TMeta, TSignal> | void), client?: (schema: GetAuthCurrentSchema, options: {
            parameters: GetAuthCurrentParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetAuthCurrentData, GetAuthCurrentError>>): Promise<RequestFnResponse<GetAuthCurrentData, GetAuthCurrentError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetAuthCurrentParameters | ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters>> | undefined, NoInfer<OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetAuthCurrentData, GetAuthCurrentParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>, updater: Updater<NoInfer<GetAuthCurrentData> | undefined, NoInfer<GetAuthCurrentData> | undefined>, options?: SetDataOptions): Array<GetAuthCurrentData | undefined>;
        /**/
        setQueryData(parameters: (GetAuthCurrentParameters | undefined) | ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>, updater: Updater<NoInfer<GetAuthCurrentData> | undefined, NoInfer<GetAuthCurrentData> | undefined>, options?: SetDataOptions): GetAuthCurrentData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetAuthCurrentParameters | void): ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthCurrent.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAuthCurrentParameters, TData = GetAuthCurrentData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetAuthCurrentData, GetAuthCurrentError, OperationInfiniteData<TData, GetAuthCurrentParameters>, ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthCurrentData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthCurrentParameters>, GetAuthCurrentError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthCurrent.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAuthCurrentParameters, TData = GetAuthCurrentData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetAuthCurrentData, GetAuthCurrentError, OperationInfiniteData<TData, GetAuthCurrentParameters>, ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthCurrentData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthCurrentParameters>, GetAuthCurrentError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getAuthCurrentTotal = qraft.apiService.getAuthCurrent.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError> | QueryFiltersByQueryKey<GetAuthCurrentSchema, GetAuthCurrentData, TInfinite, GetAuthCurrentParameters, GetAuthCurrentError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getAuthCurrentResults = qraft.apiService.getAuthCurrent.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getAuthCurrentResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getAuthCurrentCombinedResults = qraft.apiService.getAuthCurrent.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getAuthCurrentCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetAuthCurrentSchema, GetAuthCurrentParameters, GetAuthCurrentData, GetAuthCurrentError>>, TCombinedResult = Array<UseQueryResult<GetAuthCurrentData, GetAuthCurrentError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetAuthCurrentData, GetAuthCurrentError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetAuthCurrentParameters | void): ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthCurrent.useQuery()
         * ```
         */
        useQuery<TData = GetAuthCurrentData>(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options?: Omit<UndefinedInitialDataOptions<GetAuthCurrentData, GetAuthCurrentError, TData, ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>>, "queryKey">): UseQueryResult<TData, GetAuthCurrentError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthCurrent.useQuery()
         * ```
         */
        useQuery<TData = GetAuthCurrentData>(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options: Omit<DefinedInitialDataOptions<GetAuthCurrentData, GetAuthCurrentError, TData, ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAuthCurrentError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthCurrent.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetAuthCurrentParameters, TData = GetAuthCurrentData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetAuthCurrentData, GetAuthCurrentError, OperationInfiniteData<TData, GetAuthCurrentParameters>, GetAuthCurrentData, ServiceOperationInfiniteQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthCurrentData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthCurrentParameters>, GetAuthCurrentError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetAuthCurrentSchema, GetAuthCurrentParameters, GetAuthCurrentData, GetAuthCurrentError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetAuthCurrentData, GetAuthCurrentError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetAuthCurrentData, GetAuthCurrentError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetAuthCurrentData>(parameters: ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters> | (GetAuthCurrentParameters | void), options?: Omit<UseSuspenseQueryOptions<GetAuthCurrentData, GetAuthCurrentError, TData, ServiceOperationQueryKey<GetAuthCurrentSchema, GetAuthCurrentParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetAuthCurrentError | Error>;
        schema: GetAuthCurrentSchema;
        types: {
            parameters: GetAuthCurrentParameters;
            data: GetAuthCurrentData;
            error: GetAuthCurrentError;
        };
    };
    postAuthMagicLink: {
        /**/
        getMutationKey(parameters: PostAuthMagicLinkParameters | void): ServiceOperationMutationKey<PostAuthMagicLinkSchema, PostAuthMagicLinkParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthMagicLink.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthMagicLink.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends PostAuthMagicLinkBody, TContext = unknown>(parameters: PostAuthMagicLinkParameters, options?: ServiceOperationUseMutationOptions<PostAuthMagicLinkSchema, PostAuthMagicLinkData, PostAuthMagicLinkParameters, TVariables, PostAuthMagicLinkError, TContext>): UseMutationResult<PostAuthMagicLinkData, PostAuthMagicLinkError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthMagicLink.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.apiService.postAuthMagicLink.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<PostAuthMagicLinkBody, PostAuthMagicLinkParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<PostAuthMagicLinkSchema, PostAuthMagicLinkData, PostAuthMagicLinkParameters, TVariables, PostAuthMagicLinkError, TContext>): UseMutationResult<PostAuthMagicLinkData, PostAuthMagicLinkError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const postAuthMagicLinkTotal = qraft.apiService.postAuthMagicLink.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const postAuthMagicLinkTotal = qraft.apiService.postAuthMagicLink.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<PostAuthMagicLinkBody, PostAuthMagicLinkData, PostAuthMagicLinkParameters, PostAuthMagicLinkError, TContext> | MutationFiltersByMutationKey<PostAuthMagicLinkSchema, PostAuthMagicLinkBody, PostAuthMagicLinkData, PostAuthMagicLinkParameters, PostAuthMagicLinkError, TContext>): number;
        /**/
        isMutating<TContext>(filters?: MutationFiltersByParameters<PostAuthMagicLinkBody, PostAuthMagicLinkData, PostAuthMagicLinkParameters, PostAuthMagicLinkError, TContext> | MutationFiltersByMutationKey<PostAuthMagicLinkSchema, PostAuthMagicLinkBody, PostAuthMagicLinkData, PostAuthMagicLinkParameters, PostAuthMagicLinkError, TContext>): number;
        /**/
        (options: ServiceOperationMutationFnOptions<PostAuthMagicLinkBody, PostAuthMagicLinkParameters>, client?: (schema: PostAuthMagicLinkSchema, options: ServiceOperationMutationFnOptions<PostAuthMagicLinkBody, PostAuthMagicLinkParameters>) => Promise<RequestFnResponse<PostAuthMagicLinkData, PostAuthMagicLinkError>>): Promise<RequestFnResponse<PostAuthMagicLinkData, PostAuthMagicLinkError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const postAuthMagicLinkPendingMutationVariables = qraft.apiService.postAuthMagicLink.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const postAuthMagicLinkMutationData = qraft.apiService.postAuthMagicLink.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<PostAuthMagicLinkData, PostAuthMagicLinkError, MutationVariables<PostAuthMagicLinkBody, PostAuthMagicLinkParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<PostAuthMagicLinkBody, PostAuthMagicLinkData, PostAuthMagicLinkParameters, PostAuthMagicLinkError, TContext> | MutationFiltersByMutationKey<PostAuthMagicLinkSchema, PostAuthMagicLinkBody, PostAuthMagicLinkData, PostAuthMagicLinkParameters, PostAuthMagicLinkError, TContext>;
            select?: (mutation: Mutation<PostAuthMagicLinkData, PostAuthMagicLinkError, MutationVariables<PostAuthMagicLinkBody, PostAuthMagicLinkParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: PostAuthMagicLinkSchema;
        types: {
            parameters: PostAuthMagicLinkParameters;
            data: PostAuthMagicLinkData;
            error: PostAuthMagicLinkError;
            body: PostAuthMagicLinkBody;
        };
    };
    getAuthMagicLinkToken: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetAuthMagicLinkTokenParameters): ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthMagicLinkToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options?: Omit<UndefinedInitialDataOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, TData, ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>>, "queryKey">): UseQueryResult<TData, GetAuthMagicLinkTokenError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthMagicLinkToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options: Omit<DefinedInitialDataOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, TData, ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAuthMagicLinkTokenError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetAuthMagicLinkTokenParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters, TPageParam, GetAuthMagicLinkTokenError>): Promise<OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetAuthMagicLinkTokenParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters, TPageParam, GetAuthMagicLinkTokenError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetAuthMagicLinkTokenParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters, TPageParam, GetAuthMagicLinkTokenError>): Promise<OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): Promise<GetAuthMagicLinkTokenData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): Promise<GetAuthMagicLinkTokenData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters)): OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>,
            data: NoInfer<OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>,
            data: GetAuthMagicLinkTokenData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters)): GetAuthMagicLinkTokenData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters)): QueryState<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetAuthMagicLinkTokenParameters | ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>): QueryState<OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters>, GetAuthMagicLinkTokenError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetAuthMagicLinkTokenParameters, TMeta, TSignal>), client?: (schema: GetAuthMagicLinkTokenSchema, options: {
            parameters: GetAuthMagicLinkTokenParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>): Promise<RequestFnResponse<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetAuthMagicLinkTokenParameters | ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters>> | undefined, NoInfer<OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>, updater: Updater<NoInfer<GetAuthMagicLinkTokenData> | undefined, NoInfer<GetAuthMagicLinkTokenData> | undefined>, options?: SetDataOptions): Array<GetAuthMagicLinkTokenData | undefined>;
        /**/
        setQueryData(parameters: (GetAuthMagicLinkTokenParameters) | ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>, updater: Updater<NoInfer<GetAuthMagicLinkTokenData> | undefined, NoInfer<GetAuthMagicLinkTokenData> | undefined>, options?: SetDataOptions): GetAuthMagicLinkTokenData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetAuthMagicLinkTokenParameters): ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthMagicLinkToken.useInfiniteQuery({
         *     path: {
         *         token: token
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAuthMagicLinkTokenParameters, TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options: Omit<UndefinedInitialDataInfiniteOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, OperationInfiniteData<TData, GetAuthMagicLinkTokenParameters>, ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthMagicLinkTokenData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthMagicLinkTokenParameters>, GetAuthMagicLinkTokenError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthMagicLinkToken.useInfiniteQuery({
         *     path: {
         *         token: token
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAuthMagicLinkTokenParameters, TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options: Omit<DefinedInitialDataInfiniteOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, OperationInfiniteData<TData, GetAuthMagicLinkTokenParameters>, ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthMagicLinkTokenData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthMagicLinkTokenParameters>, GetAuthMagicLinkTokenError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getAuthMagicLinkTokenTotal = qraft.apiService.getAuthMagicLinkToken.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const getAuthMagicLinkTokenByParametersTotal = qraft.apiService.getAuthMagicLinkToken.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         path: {
         *             token: token
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError> | QueryFiltersByQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenData, TInfinite, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getAuthMagicLinkTokenResults = qraft.apiService.getAuthMagicLinkToken.useQueries({
         *     queries: [
         *         {
         *             path: {
         *                 token: token1
         *             }
         *         },
         *         {
         *             path: {
         *                 token: token2
         *             }
         *         }
         *     ]
         * });
         * getAuthMagicLinkTokenResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getAuthMagicLinkTokenCombinedResults = qraft.apiService.getAuthMagicLinkToken.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             path: {
         *                 token: token1
         *             }
         *         },
         *         {
         *             path: {
         *                 token: token2
         *             }
         *         }
         *     ]
         * });
         * getAuthMagicLinkTokenCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>, TCombinedResult = Array<UseQueryResult<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetAuthMagicLinkTokenParameters): ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthMagicLinkToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options?: Omit<UndefinedInitialDataOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, TData, ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>>, "queryKey">): UseQueryResult<TData, GetAuthMagicLinkTokenError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAuthMagicLinkToken.useQuery({
         *     path: {
         *         token: token
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options: Omit<DefinedInitialDataOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, TData, ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAuthMagicLinkTokenError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAuthMagicLinkToken.useSuspenseInfiniteQuery({
         *     path: {
         *         token: token
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetAuthMagicLinkTokenParameters, TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options: Omit<UseSuspenseInfiniteQueryOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, OperationInfiniteData<TData, GetAuthMagicLinkTokenParameters>, GetAuthMagicLinkTokenData, ServiceOperationInfiniteQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAuthMagicLinkTokenData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetAuthMagicLinkTokenParameters>, GetAuthMagicLinkTokenError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters, GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetAuthMagicLinkTokenData>(parameters: ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters> | (GetAuthMagicLinkTokenParameters), options?: Omit<UseSuspenseQueryOptions<GetAuthMagicLinkTokenData, GetAuthMagicLinkTokenError, TData, ServiceOperationQueryKey<GetAuthMagicLinkTokenSchema, GetAuthMagicLinkTokenParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetAuthMagicLinkTokenError | Error>;
        schema: GetAuthMagicLinkTokenSchema;
        types: {
            parameters: GetAuthMagicLinkTokenParameters;
            data: GetAuthMagicLinkTokenData;
            error: GetAuthMagicLinkTokenError;
        };
    };
    getAdminSpacecrafts: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetAdminSpacecraftsParameters | void): ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetAdminSpacecraftsData>(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options?: Omit<UndefinedInitialDataOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, TData, ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>>, "queryKey">): UseQueryResult<TData, GetAdminSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetAdminSpacecraftsData>(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options: Omit<DefinedInitialDataOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, TData, ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAdminSpacecraftsError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetAdminSpacecraftsParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, GetAdminSpacecraftsParameters, TPageParam, GetAdminSpacecraftsError>): Promise<OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetAdminSpacecraftsParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, GetAdminSpacecraftsParameters, TPageParam, GetAdminSpacecraftsError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetAdminSpacecraftsParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, GetAdminSpacecraftsParameters, TPageParam, GetAdminSpacecraftsError>): Promise<OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | void): Promise<GetAdminSpacecraftsData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | void): Promise<GetAdminSpacecraftsData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void)): OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>,
            data: NoInfer<OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>,
            data: GetAdminSpacecraftsData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void)): GetAdminSpacecraftsData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void)): QueryState<GetAdminSpacecraftsData, GetAdminSpacecraftsError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetAdminSpacecraftsParameters | ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | void): QueryState<OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters>, GetAdminSpacecraftsError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetAdminSpacecraftsParameters, TMeta, TSignal> | void), client?: (schema: GetAdminSpacecraftsSchema, options: {
            parameters: GetAdminSpacecraftsParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetAdminSpacecraftsData, GetAdminSpacecraftsError>>): Promise<RequestFnResponse<GetAdminSpacecraftsData, GetAdminSpacecraftsError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetAdminSpacecraftsParameters | ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters>> | undefined, NoInfer<OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetAdminSpacecraftsData, GetAdminSpacecraftsParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>, updater: Updater<NoInfer<GetAdminSpacecraftsData> | undefined, NoInfer<GetAdminSpacecraftsData> | undefined>, options?: SetDataOptions): Array<GetAdminSpacecraftsData | undefined>;
        /**/
        setQueryData(parameters: (GetAdminSpacecraftsParameters | undefined) | ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>, updater: Updater<NoInfer<GetAdminSpacecraftsData> | undefined, NoInfer<GetAdminSpacecraftsData> | undefined>, options?: SetDataOptions): GetAdminSpacecraftsData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetAdminSpacecraftsParameters | void): ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminSpacecrafts.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAdminSpacecraftsParameters, TData = GetAdminSpacecraftsData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, OperationInfiniteData<TData, GetAdminSpacecraftsParameters>, ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminSpacecraftsData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminSpacecraftsParameters>, GetAdminSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminSpacecrafts.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAdminSpacecraftsParameters, TData = GetAdminSpacecraftsData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, OperationInfiniteData<TData, GetAdminSpacecraftsParameters>, ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminSpacecraftsData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminSpacecraftsParameters>, GetAdminSpacecraftsError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getAdminSpacecraftsTotal = qraft.apiService.getAdminSpacecrafts.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError> | QueryFiltersByQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsData, TInfinite, GetAdminSpacecraftsParameters, GetAdminSpacecraftsError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getAdminSpacecraftsResults = qraft.apiService.getAdminSpacecrafts.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getAdminSpacecraftsResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getAdminSpacecraftsCombinedResults = qraft.apiService.getAdminSpacecrafts.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getAdminSpacecraftsCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters, GetAdminSpacecraftsData, GetAdminSpacecraftsError>>, TCombinedResult = Array<UseQueryResult<GetAdminSpacecraftsData, GetAdminSpacecraftsError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetAdminSpacecraftsData, GetAdminSpacecraftsError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetAdminSpacecraftsParameters | void): ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetAdminSpacecraftsData>(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options?: Omit<UndefinedInitialDataOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, TData, ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>>, "queryKey">): UseQueryResult<TData, GetAdminSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminSpacecrafts.useQuery()
         * ```
         */
        useQuery<TData = GetAdminSpacecraftsData>(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options: Omit<DefinedInitialDataOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, TData, ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAdminSpacecraftsError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminSpacecrafts.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetAdminSpacecraftsParameters, TData = GetAdminSpacecraftsData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, OperationInfiniteData<TData, GetAdminSpacecraftsParameters>, GetAdminSpacecraftsData, ServiceOperationInfiniteQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminSpacecraftsData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminSpacecraftsParameters>, GetAdminSpacecraftsError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters, GetAdminSpacecraftsData, GetAdminSpacecraftsError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetAdminSpacecraftsData, GetAdminSpacecraftsError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetAdminSpacecraftsData, GetAdminSpacecraftsError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetAdminSpacecraftsData>(parameters: ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters> | (GetAdminSpacecraftsParameters | void), options?: Omit<UseSuspenseQueryOptions<GetAdminSpacecraftsData, GetAdminSpacecraftsError, TData, ServiceOperationQueryKey<GetAdminSpacecraftsSchema, GetAdminSpacecraftsParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetAdminSpacecraftsError | Error>;
        schema: GetAdminSpacecraftsSchema;
        types: {
            parameters: GetAdminSpacecraftsParameters;
            data: GetAdminSpacecraftsData;
            error: GetAdminSpacecraftsError;
        };
    };
    getAdminUsers: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetAdminUsersParameters | void): ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsers.useQuery()
         * ```
         */
        useQuery<TData = GetAdminUsersData>(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options?: Omit<UndefinedInitialDataOptions<GetAdminUsersData, GetAdminUsersError, TData, ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>>, "queryKey">): UseQueryResult<TData, GetAdminUsersError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsers.useQuery()
         * ```
         */
        useQuery<TData = GetAdminUsersData>(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options: Omit<DefinedInitialDataOptions<GetAdminUsersData, GetAdminUsersError, TData, ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAdminUsersError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetAdminUsersParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAdminUsersSchema, GetAdminUsersData, GetAdminUsersParameters, TPageParam, GetAdminUsersError>): Promise<OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetAdminUsersParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAdminUsersSchema, GetAdminUsersData, GetAdminUsersParameters, TPageParam, GetAdminUsersError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetAdminUsersParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetAdminUsersSchema, GetAdminUsersData, GetAdminUsersParameters, TPageParam, GetAdminUsersError>): Promise<OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetAdminUsersSchema, GetAdminUsersData, GetAdminUsersParameters, GetAdminUsersError> | void): Promise<GetAdminUsersData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetAdminUsersSchema, GetAdminUsersData, GetAdminUsersParameters, GetAdminUsersError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetAdminUsersSchema, GetAdminUsersData, GetAdminUsersParameters, GetAdminUsersError> | void): Promise<GetAdminUsersData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void)): OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>,
            data: NoInfer<OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>,
            data: GetAdminUsersData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void)): GetAdminUsersData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void)): QueryState<GetAdminUsersData, GetAdminUsersError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetAdminUsersParameters | ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | void): QueryState<OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters>, GetAdminUsersError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetAdminUsersSchema, GetAdminUsersParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetAdminUsersParameters, TMeta, TSignal> | void), client?: (schema: GetAdminUsersSchema, options: {
            parameters: GetAdminUsersParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetAdminUsersData, GetAdminUsersError>>): Promise<RequestFnResponse<GetAdminUsersData, GetAdminUsersError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetAdminUsersParameters | ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters>> | undefined, NoInfer<OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetAdminUsersData, GetAdminUsersParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>, updater: Updater<NoInfer<GetAdminUsersData> | undefined, NoInfer<GetAdminUsersData> | undefined>, options?: SetDataOptions): Array<GetAdminUsersData | undefined>;
        /**/
        setQueryData(parameters: (GetAdminUsersParameters | undefined) | ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>, updater: Updater<NoInfer<GetAdminUsersData> | undefined, NoInfer<GetAdminUsersData> | undefined>, options?: SetDataOptions): GetAdminUsersData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetAdminUsersParameters | void): ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminUsers.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAdminUsersParameters, TData = GetAdminUsersData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetAdminUsersData, GetAdminUsersError, OperationInfiniteData<TData, GetAdminUsersParameters>, ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminUsersData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminUsersParameters>, GetAdminUsersError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminUsers.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAdminUsersParameters, TData = GetAdminUsersData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetAdminUsersData, GetAdminUsersError, OperationInfiniteData<TData, GetAdminUsersParameters>, ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminUsersData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminUsersParameters>, GetAdminUsersError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getAdminUsersTotal = qraft.apiService.getAdminUsers.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError> | QueryFiltersByQueryKey<GetAdminUsersSchema, GetAdminUsersData, TInfinite, GetAdminUsersParameters, GetAdminUsersError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getAdminUsersResults = qraft.apiService.getAdminUsers.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getAdminUsersResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getAdminUsersCombinedResults = qraft.apiService.getAdminUsers.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getAdminUsersCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetAdminUsersSchema, GetAdminUsersParameters, GetAdminUsersData, GetAdminUsersError>>, TCombinedResult = Array<UseQueryResult<GetAdminUsersData, GetAdminUsersError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetAdminUsersData, GetAdminUsersError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetAdminUsersParameters | void): ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsers.useQuery()
         * ```
         */
        useQuery<TData = GetAdminUsersData>(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options?: Omit<UndefinedInitialDataOptions<GetAdminUsersData, GetAdminUsersError, TData, ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>>, "queryKey">): UseQueryResult<TData, GetAdminUsersError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsers.useQuery()
         * ```
         */
        useQuery<TData = GetAdminUsersData>(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options: Omit<DefinedInitialDataOptions<GetAdminUsersData, GetAdminUsersError, TData, ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAdminUsersError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminUsers.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetAdminUsersParameters, TData = GetAdminUsersData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetAdminUsersData, GetAdminUsersError, OperationInfiniteData<TData, GetAdminUsersParameters>, GetAdminUsersData, ServiceOperationInfiniteQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminUsersData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminUsersParameters>, GetAdminUsersError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetAdminUsersSchema, GetAdminUsersParameters, GetAdminUsersData, GetAdminUsersError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetAdminUsersData, GetAdminUsersError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetAdminUsersData, GetAdminUsersError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetAdminUsersData>(parameters: ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters> | (GetAdminUsersParameters | void), options?: Omit<UseSuspenseQueryOptions<GetAdminUsersData, GetAdminUsersError, TData, ServiceOperationQueryKey<GetAdminUsersSchema, GetAdminUsersParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetAdminUsersError | Error>;
        schema: GetAdminUsersSchema;
        types: {
            parameters: GetAdminUsersParameters;
            data: GetAdminUsersData;
            error: GetAdminUsersError;
        };
    };
    getAdminUsersPid: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetAdminUsersPidParameters): ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsersPid.useQuery({
         *     path: {
         *         pid: pid
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAdminUsersPidData>(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options?: Omit<UndefinedInitialDataOptions<GetAdminUsersPidData, GetAdminUsersPidError, TData, ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>>, "queryKey">): UseQueryResult<TData, GetAdminUsersPidError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsersPid.useQuery({
         *     path: {
         *         pid: pid
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAdminUsersPidData>(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options: Omit<DefinedInitialDataOptions<GetAdminUsersPidData, GetAdminUsersPidError, TData, ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAdminUsersPidError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetAdminUsersPidParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAdminUsersPidSchema, GetAdminUsersPidData, GetAdminUsersPidParameters, TPageParam, GetAdminUsersPidError>): Promise<OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetAdminUsersPidParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetAdminUsersPidSchema, GetAdminUsersPidData, GetAdminUsersPidParameters, TPageParam, GetAdminUsersPidError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetAdminUsersPidParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetAdminUsersPidSchema, GetAdminUsersPidData, GetAdminUsersPidParameters, TPageParam, GetAdminUsersPidError>): Promise<OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetAdminUsersPidSchema, GetAdminUsersPidData, GetAdminUsersPidParameters, GetAdminUsersPidError>): Promise<GetAdminUsersPidData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetAdminUsersPidSchema, GetAdminUsersPidData, GetAdminUsersPidParameters, GetAdminUsersPidError>): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetAdminUsersPidSchema, GetAdminUsersPidData, GetAdminUsersPidParameters, GetAdminUsersPidError>): Promise<GetAdminUsersPidData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters)): OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>,
            data: NoInfer<OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>,
            data: GetAdminUsersPidData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters)): GetAdminUsersPidData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters)): QueryState<GetAdminUsersPidData, GetAdminUsersPidError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetAdminUsersPidParameters | ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>): QueryState<OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters>, GetAdminUsersPidError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetAdminUsersPidParameters, TMeta, TSignal>), client?: (schema: GetAdminUsersPidSchema, options: {
            parameters: GetAdminUsersPidParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetAdminUsersPidData, GetAdminUsersPidError>>): Promise<RequestFnResponse<GetAdminUsersPidData, GetAdminUsersPidError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetAdminUsersPidParameters | ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters>> | undefined, NoInfer<OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetAdminUsersPidData, GetAdminUsersPidParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>, updater: Updater<NoInfer<GetAdminUsersPidData> | undefined, NoInfer<GetAdminUsersPidData> | undefined>, options?: SetDataOptions): Array<GetAdminUsersPidData | undefined>;
        /**/
        setQueryData(parameters: (GetAdminUsersPidParameters) | ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>, updater: Updater<NoInfer<GetAdminUsersPidData> | undefined, NoInfer<GetAdminUsersPidData> | undefined>, options?: SetDataOptions): GetAdminUsersPidData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetAdminUsersPidParameters): ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminUsersPid.useInfiniteQuery({
         *     path: {
         *         pid: pid
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAdminUsersPidParameters, TData = GetAdminUsersPidData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options: Omit<UndefinedInitialDataInfiniteOptions<GetAdminUsersPidData, GetAdminUsersPidError, OperationInfiniteData<TData, GetAdminUsersPidParameters>, ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminUsersPidData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminUsersPidParameters>, GetAdminUsersPidError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminUsersPid.useInfiniteQuery({
         *     path: {
         *         pid: pid
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetAdminUsersPidParameters, TData = GetAdminUsersPidData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options: Omit<DefinedInitialDataInfiniteOptions<GetAdminUsersPidData, GetAdminUsersPidError, OperationInfiniteData<TData, GetAdminUsersPidParameters>, ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminUsersPidData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminUsersPidParameters>, GetAdminUsersPidError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getAdminUsersPidTotal = qraft.apiService.getAdminUsersPid.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const getAdminUsersPidByParametersTotal = qraft.apiService.getAdminUsersPid.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         path: {
         *             pid: pid
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError> | QueryFiltersByQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidData, TInfinite, GetAdminUsersPidParameters, GetAdminUsersPidError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getAdminUsersPidResults = qraft.apiService.getAdminUsersPid.useQueries({
         *     queries: [
         *         {
         *             path: {
         *                 pid: pid1
         *             }
         *         },
         *         {
         *             path: {
         *                 pid: pid2
         *             }
         *         }
         *     ]
         * });
         * getAdminUsersPidResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getAdminUsersPidCombinedResults = qraft.apiService.getAdminUsersPid.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             path: {
         *                 pid: pid1
         *             }
         *         },
         *         {
         *             path: {
         *                 pid: pid2
         *             }
         *         }
         *     ]
         * });
         * getAdminUsersPidCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetAdminUsersPidSchema, GetAdminUsersPidParameters, GetAdminUsersPidData, GetAdminUsersPidError>>, TCombinedResult = Array<UseQueryResult<GetAdminUsersPidData, GetAdminUsersPidError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetAdminUsersPidData, GetAdminUsersPidError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetAdminUsersPidParameters): ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsersPid.useQuery({
         *     path: {
         *         pid: pid
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAdminUsersPidData>(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options?: Omit<UndefinedInitialDataOptions<GetAdminUsersPidData, GetAdminUsersPidError, TData, ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>>, "queryKey">): UseQueryResult<TData, GetAdminUsersPidError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.apiService.getAdminUsersPid.useQuery({
         *     path: {
         *         pid: pid
         *     }
         * })
         * ```
         */
        useQuery<TData = GetAdminUsersPidData>(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options: Omit<DefinedInitialDataOptions<GetAdminUsersPidData, GetAdminUsersPidError, TData, ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetAdminUsersPidError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.apiService.getAdminUsersPid.useSuspenseInfiniteQuery({
         *     path: {
         *         pid: pid
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetAdminUsersPidParameters, TData = GetAdminUsersPidData>(parameters: ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options: Omit<UseSuspenseInfiniteQueryOptions<GetAdminUsersPidData, GetAdminUsersPidError, OperationInfiniteData<TData, GetAdminUsersPidParameters>, GetAdminUsersPidData, ServiceOperationInfiniteQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetAdminUsersPidData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetAdminUsersPidParameters>, GetAdminUsersPidError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetAdminUsersPidSchema, GetAdminUsersPidParameters, GetAdminUsersPidData, GetAdminUsersPidError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetAdminUsersPidData, GetAdminUsersPidError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetAdminUsersPidData, GetAdminUsersPidError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetAdminUsersPidData>(parameters: ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters> | (GetAdminUsersPidParameters), options?: Omit<UseSuspenseQueryOptions<GetAdminUsersPidData, GetAdminUsersPidError, TData, ServiceOperationQueryKey<GetAdminUsersPidSchema, GetAdminUsersPidParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetAdminUsersPidError | Error>;
        schema: GetAdminUsersPidSchema;
        types: {
            parameters: GetAdminUsersPidParameters;
            data: GetAdminUsersPidData;
            error: GetAdminUsersPidError;
        };
    };
}
export const apiService: {
    getSystemsNearby: {
        schema: {
            method: "get";
            url: "/api/systems/nearby";
        };
    };
    getSystemsCurrentSystem: {
        schema: {
            method: "get";
            url: "/api/systems/current_system";
        };
    };
    getSpacecrafts: {
        schema: {
            method: "get";
            url: "/api/spacecrafts";
        };
    };
    getSpacecraftsId: {
        schema: {
            method: "get";
            url: "/api/spacecrafts/{id}";
        };
    };
    postAuthRegister: {
        schema: {
            method: "post";
            url: "/api/auth/register";
            mediaType: [
                "application/json"
            ];
        };
    };
    getAuthVerifyToken: {
        schema: {
            method: "get";
            url: "/api/auth/verify/{token}";
        };
    };
    postAuthLogin: {
        schema: {
            method: "post";
            url: "/api/auth/login";
            mediaType: [
                "application/json"
            ];
        };
    };
    postAuthForgot: {
        schema: {
            method: "post";
            url: "/api/auth/forgot";
            mediaType: [
                "application/json"
            ];
        };
    };
    postAuthReset: {
        schema: {
            method: "post";
            url: "/api/auth/reset";
            mediaType: [
                "application/json"
            ];
        };
    };
    getAuthCurrent: {
        schema: {
            method: "get";
            url: "/api/auth/current";
        };
    };
    postAuthMagicLink: {
        schema: {
            method: "post";
            url: "/api/auth/magic-link";
            mediaType: [
                "application/json"
            ];
        };
    };
    getAuthMagicLinkToken: {
        schema: {
            method: "get";
            url: "/api/auth/magic-link/{token}";
        };
    };
    getAdminSpacecrafts: {
        schema: {
            method: "get";
            url: "/api/admin/spacecrafts";
            security: [
                "bearer_token"
            ];
        };
    };
    getAdminUsers: {
        schema: {
            method: "get";
            url: "/api/admin/users";
            security: [
                "bearer_token"
            ];
        };
    };
    getAdminUsersPid: {
        schema: {
            method: "get";
            url: "/api/admin/users/{pid}";
            security: [
                "bearer_token"
            ];
        };
    };
} = {
    getSystemsNearby: {
        schema: {
            method: "get",
            url: "/api/systems/nearby"
        }
    },
    getSystemsCurrentSystem: {
        schema: {
            method: "get",
            url: "/api/systems/current_system"
        }
    },
    getSpacecrafts: {
        schema: {
            method: "get",
            url: "/api/spacecrafts"
        }
    },
    getSpacecraftsId: {
        schema: {
            method: "get",
            url: "/api/spacecrafts/{id}"
        }
    },
    postAuthRegister: {
        schema: {
            method: "post",
            url: "/api/auth/register",
            mediaType: ["application/json"]
        }
    },
    getAuthVerifyToken: {
        schema: {
            method: "get",
            url: "/api/auth/verify/{token}"
        }
    },
    postAuthLogin: {
        schema: {
            method: "post",
            url: "/api/auth/login",
            mediaType: ["application/json"]
        }
    },
    postAuthForgot: {
        schema: {
            method: "post",
            url: "/api/auth/forgot",
            mediaType: ["application/json"]
        }
    },
    postAuthReset: {
        schema: {
            method: "post",
            url: "/api/auth/reset",
            mediaType: ["application/json"]
        }
    },
    getAuthCurrent: {
        schema: {
            method: "get",
            url: "/api/auth/current"
        }
    },
    postAuthMagicLink: {
        schema: {
            method: "post",
            url: "/api/auth/magic-link",
            mediaType: ["application/json"]
        }
    },
    getAuthMagicLinkToken: {
        schema: {
            method: "get",
            url: "/api/auth/magic-link/{token}"
        }
    },
    getAdminSpacecrafts: {
        schema: {
            method: "get",
            url: "/api/admin/spacecrafts",
            security: ["bearer_token"]
        }
    },
    getAdminUsers: {
        schema: {
            method: "get",
            url: "/api/admin/users",
            security: ["bearer_token"]
        }
    },
    getAdminUsersPid: {
        schema: {
            method: "get",
            url: "/api/admin/users/{pid}",
            security: ["bearer_token"]
        }
    }
};
type GetSystemsNearbySchema = {
    method: "get";
    url: "/api/systems/nearby";
};
type GetSystemsNearbyParameters = undefined;
type GetSystemsNearbyData = paths["/api/systems/nearby"]["get"]["responses"]["200"]["content"]["application/json"];
type GetSystemsNearbyError = unknown;
type GetSystemsCurrentSystemSchema = {
    method: "get";
    url: "/api/systems/current_system";
};
type GetSystemsCurrentSystemParameters = undefined;
type GetSystemsCurrentSystemData = paths["/api/systems/current_system"]["get"]["responses"]["200"]["content"]["application/json"];
type GetSystemsCurrentSystemError = unknown;
type GetSpacecraftsSchema = {
    method: "get";
    url: "/api/spacecrafts";
};
type GetSpacecraftsParameters = undefined;
type GetSpacecraftsData = paths["/api/spacecrafts"]["get"]["responses"]["200"]["content"]["application/json"];
type GetSpacecraftsError = unknown;
type GetSpacecraftsIdSchema = {
    method: "get";
    url: "/api/spacecrafts/{id}";
};
type GetSpacecraftsIdParameters = paths["/api/spacecrafts/{id}"]["get"]["parameters"];
type GetSpacecraftsIdData = paths["/api/spacecrafts/{id}"]["get"]["responses"]["200"]["content"]["application/json"];
type GetSpacecraftsIdError = unknown;
type PostAuthRegisterSchema = {
    method: "post";
    url: "/api/auth/register";
    mediaType: [
        "application/json"
    ];
};
type PostAuthRegisterParameters = {};
type PostAuthRegisterData = paths["/api/auth/register"]["post"]["responses"]["200"]["content"]["application/json"];
type PostAuthRegisterError = unknown;
type PostAuthRegisterBody = NonNullable<paths["/api/auth/register"]["post"]["requestBody"]>["content"]["application/json"];
type GetAuthVerifyTokenSchema = {
    method: "get";
    url: "/api/auth/verify/{token}";
};
type GetAuthVerifyTokenParameters = paths["/api/auth/verify/{token}"]["get"]["parameters"];
type GetAuthVerifyTokenData = paths["/api/auth/verify/{token}"]["get"]["responses"]["308"]["content"]["application/json"];
type GetAuthVerifyTokenError = unknown;
type PostAuthLoginSchema = {
    method: "post";
    url: "/api/auth/login";
    mediaType: [
        "application/json"
    ];
};
type PostAuthLoginParameters = {};
type PostAuthLoginData = paths["/api/auth/login"]["post"]["responses"]["200"]["content"]["application/json"];
type PostAuthLoginError = unknown;
type PostAuthLoginBody = NonNullable<paths["/api/auth/login"]["post"]["requestBody"]>["content"]["application/json"];
type PostAuthForgotSchema = {
    method: "post";
    url: "/api/auth/forgot";
    mediaType: [
        "application/json"
    ];
};
type PostAuthForgotParameters = {};
type PostAuthForgotData = paths["/api/auth/forgot"]["post"]["responses"]["200"]["content"]["application/json"];
type PostAuthForgotError = unknown;
type PostAuthForgotBody = NonNullable<paths["/api/auth/forgot"]["post"]["requestBody"]>["content"]["application/json"];
type PostAuthResetSchema = {
    method: "post";
    url: "/api/auth/reset";
    mediaType: [
        "application/json"
    ];
};
type PostAuthResetParameters = {};
type PostAuthResetData = paths["/api/auth/reset"]["post"]["responses"]["200"]["content"]["application/json"];
type PostAuthResetError = unknown;
type PostAuthResetBody = NonNullable<paths["/api/auth/reset"]["post"]["requestBody"]>["content"]["application/json"];
type GetAuthCurrentSchema = {
    method: "get";
    url: "/api/auth/current";
};
type GetAuthCurrentParameters = undefined;
type GetAuthCurrentData = paths["/api/auth/current"]["get"]["responses"]["200"]["content"]["application/json"];
type GetAuthCurrentError = unknown;
type PostAuthMagicLinkSchema = {
    method: "post";
    url: "/api/auth/magic-link";
    mediaType: [
        "application/json"
    ];
};
type PostAuthMagicLinkParameters = {};
type PostAuthMagicLinkData = paths["/api/auth/magic-link"]["post"]["responses"]["200"]["content"]["application/json"];
type PostAuthMagicLinkError = unknown;
type PostAuthMagicLinkBody = NonNullable<paths["/api/auth/magic-link"]["post"]["requestBody"]>["content"]["application/json"];
type GetAuthMagicLinkTokenSchema = {
    method: "get";
    url: "/api/auth/magic-link/{token}";
};
type GetAuthMagicLinkTokenParameters = paths["/api/auth/magic-link/{token}"]["get"]["parameters"];
type GetAuthMagicLinkTokenData = paths["/api/auth/magic-link/{token}"]["get"]["responses"]["200"]["content"]["application/json"];
type GetAuthMagicLinkTokenError = unknown;
type GetAdminSpacecraftsSchema = {
    method: "get";
    url: "/api/admin/spacecrafts";
    security: [
        "bearer_token"
    ];
};
type GetAdminSpacecraftsParameters = undefined;
type GetAdminSpacecraftsData = paths["/api/admin/spacecrafts"]["get"]["responses"]["200"]["content"]["application/json"];
type GetAdminSpacecraftsError = unknown;
type GetAdminUsersSchema = {
    method: "get";
    url: "/api/admin/users";
    security: [
        "bearer_token"
    ];
};
type GetAdminUsersParameters = undefined;
type GetAdminUsersData = paths["/api/admin/users"]["get"]["responses"]["200"]["content"]["application/json"];
type GetAdminUsersError = unknown;
type GetAdminUsersPidSchema = {
    method: "get";
    url: "/api/admin/users/{pid}";
    security: [
        "bearer_token"
    ];
};
type GetAdminUsersPidParameters = paths["/api/admin/users/{pid}"]["get"]["parameters"];
type GetAdminUsersPidData = paths["/api/admin/users/{pid}"]["get"]["responses"]["200"]["content"]["application/json"];
type GetAdminUsersPidError = unknown;
