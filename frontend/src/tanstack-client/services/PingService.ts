/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { InvalidateQueryFilters, OperationInfiniteData, PartialParameters, QueryFiltersByParameters, QueryFiltersByQueryKey, QueryFnOptionsByParameters, QueryFnOptionsByQueryKey, RequestFnResponse, ServiceOperationEnsureInfiniteQueryDataOptions, ServiceOperationEnsureQueryDataOptions, ServiceOperationFetchInfiniteQueryOptions, ServiceOperationFetchQueryOptions, ServiceOperationInfiniteQueryKey, ServiceOperationQueryKey, UseQueryOptionsForUseQueries, UseQueryOptionsForUseSuspenseQuery, WithOptional } from "@openapi-qraft/tanstack-query-react-types";
import type { CancelOptions, InfiniteQueryPageParamsOptions, InvalidateOptions, NoInfer, QueryState, RefetchOptions, ResetOptions, SetDataOptions, Updater } from "@tanstack/query-core";
import type { DefinedInitialDataInfiniteOptions, DefinedInitialDataOptions, DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UndefinedInitialDataInfiniteOptions, UndefinedInitialDataOptions, UseInfiniteQueryResult, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
export interface PingService {
    get: {
        /**/
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: CancelOptions): Promise<void>;
        /**/
        getQueryKey(parameters: GetParameters | void): ServiceOperationQueryKey<GetSchema, GetParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.pingService.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void), options?: Omit<UndefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): UseQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.pingService.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void), options: Omit<DefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetError | Error>;
        /**/
        fetchInfiniteQuery<TPageParam extends GetParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSchema, GetData, GetParameters, TPageParam, GetError>): Promise<OperationInfiniteData<GetData, GetParameters>>;
        /**/
        prefetchInfiniteQuery<TPageParam extends GetParameters>(options: ServiceOperationFetchInfiniteQueryOptions<GetSchema, GetData, GetParameters, TPageParam, GetError>): Promise<void>;
        /**/
        ensureInfiniteQueryData<TPageParam extends GetParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<GetSchema, GetData, GetParameters, TPageParam, GetError>): Promise<OperationInfiniteData<GetData, GetParameters>>;
        /**/
        fetchQuery(options: ServiceOperationFetchQueryOptions<GetSchema, GetData, GetParameters, GetError> | void): Promise<GetData>;
        /**/
        prefetchQuery(options: ServiceOperationFetchQueryOptions<GetSchema, GetData, GetParameters, GetError> | void): Promise<void>;
        /**/
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<GetSchema, GetData, GetParameters, GetError> | void): Promise<GetData>;
        /**/
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (GetParameters | void)): OperationInfiniteData<GetData, GetParameters> | undefined;
        /**/
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>,
            data: NoInfer<OperationInfiniteData<GetData, GetParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<GetSchema, GetParameters>,
            data: GetData | undefined
        ]>;
        /**/
        getQueryData(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void)): GetData | undefined;
        /**/
        getQueryState(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void)): QueryState<GetData, GetError> | undefined;
        /**/
        getInfiniteQueryState(parameters: GetParameters | ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | void): QueryState<OperationInfiniteData<GetData, GetParameters>, GetError> | undefined;
        /**/
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: InvalidateOptions): Promise<void>;
        /**/
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): number;
        /**/
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<GetSchema, GetParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<GetParameters, TMeta, TSignal> | void), client?: (schema: GetSchema, options: {
            parameters: GetParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<GetData, GetError>>): Promise<RequestFnResponse<GetData, GetError>>;
        /**/
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: RefetchOptions): Promise<void>;
        /**/
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): void;
        /**/
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, options?: ResetOptions): Promise<void>;
        /**/
        setInfiniteQueryData(parameters: GetParameters | ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, updater: Updater<NoInfer<OperationInfiniteData<GetData, GetParameters>> | undefined, NoInfer<OperationInfiniteData<GetData, GetParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<GetData, GetParameters> | undefined;
        /**/
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>, updater: Updater<NoInfer<GetData> | undefined, NoInfer<GetData> | undefined>, options?: SetDataOptions): Array<GetData | undefined>;
        /**/
        setQueryData(parameters: (GetParameters | undefined) | ServiceOperationQueryKey<GetSchema, GetParameters>, updater: Updater<NoInfer<GetData> | undefined, NoInfer<GetData> | undefined>, options?: SetDataOptions): GetData | undefined;
        /**/
        getInfiniteQueryKey(parameters: GetParameters | void): ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.pingService.get.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetParameters, TData = GetData>(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (GetParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<GetData, GetError, OperationInfiniteData<TData, GetParameters>, ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<OperationInfiniteData<TData, GetParameters>, GetError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.pingService.get.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends GetParameters, TData = GetData>(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (GetParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<GetData, GetError, OperationInfiniteData<TData, GetParameters>, ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<OperationInfiniteData<TData, GetParameters>, GetError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const getTotal = qraft.pingService.get.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<GetSchema, GetData, TInfinite, GetParameters, GetError> | QueryFiltersByQueryKey<GetSchema, GetData, TInfinite, GetParameters, GetError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const getResults = qraft.pingService.get.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const getCombinedResults = qraft.pingService.get.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * getCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<GetSchema, GetParameters, GetData, GetError>>, TCombinedResult = Array<UseQueryResult<GetData, GetError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<GetData, GetError>>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        getQueryKey(parameters: GetParameters | void): ServiceOperationQueryKey<GetSchema, GetParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.pingService.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void), options?: Omit<UndefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): UseQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.pingService.get.useQuery()
         * ```
         */
        useQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void), options: Omit<DefinedInitialDataOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): DefinedUseQueryResult<TData, GetError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.pingService.get.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends GetParameters, TData = GetData>(parameters: ServiceOperationInfiniteQueryKey<GetSchema, GetParameters> | (GetParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<GetData, GetError, OperationInfiniteData<TData, GetParameters>, GetData, ServiceOperationInfiniteQueryKey<GetSchema, GetParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<GetData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, GetParameters>, GetError | Error>;
        /**/
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<GetSchema, GetParameters, GetData, GetError>>, TCombinedResult = Array<UseSuspenseQueryResult<GetData, GetError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<GetData, GetError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /**/
        useSuspenseQuery<TData = GetData>(parameters: ServiceOperationQueryKey<GetSchema, GetParameters> | (GetParameters | void), options?: Omit<UseSuspenseQueryOptions<GetData, GetError, TData, ServiceOperationQueryKey<GetSchema, GetParameters>>, "queryKey">): UseSuspenseQueryResult<TData, GetError | Error>;
        schema: GetSchema;
        types: {
            parameters: GetParameters;
            data: GetData;
            error: GetError;
        };
    };
}
export const pingService: {
    get: {
        schema: {
            method: "get";
            url: "/_ping";
        };
    };
} = {
    get: {
        schema: {
            method: "get",
            url: "/_ping"
        }
    }
};
type GetSchema = {
    method: "get";
    url: "/_ping";
};
type GetParameters = undefined;
type GetData = paths["/_ping"]["get"]["responses"]["200"]["content"]["application/json"];
type GetError = unknown;
